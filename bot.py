import os
import json
import logging
from datetime import date, datetime, timedelta

from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    ContextTypes, ConversationHandler, filters
)
import gspread
from oauth2client.service_account import ServiceAccountCredentials

# Logging
logging.basicConfig(level=logging.INFO)

# --- –°—Ç–∞–Ω–∏ ---
CHOOSING, ENTER_NAME, ENTER_IPN, CHECK_STATUS = range(4)

# --- –°–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ –¥–æ—Å—Ç—É–ø–æ–º –¥–æ –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏ ---
ANALYTICS_USERS = [7555663197]

def is_analytics_user(user_id):
    return user_id in ANALYTICS_USERS

def get_main_keyboard(user_id):
    if is_analytics_user(user_id):
        return ReplyKeyboardMarkup([
            ["‚ûï –î–æ–¥–∞—Ç–∏ –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∞"],
            ["üìã –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å"],
            ["üìä –ê–Ω–∞–ª—ñ—Ç–∏–∫–∞"]
        ], resize_keyboard=True)
    else:
        return ReplyKeyboardMarkup([
            ["‚ûï –î–æ–¥–∞—Ç–∏ –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∞"],
            ["üìã –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å"]
        ], resize_keyboard=True)

cancel_keyboard = ReplyKeyboardMarkup([
    ["‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏"]
], resize_keyboard=True)

# --- –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Google –¢–∞–±–ª–∏—Ü—ñ ---
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds_dict = json.loads(os.getenv("Google_Creds_Json"))
creds = ServiceAccountCredentials.from_json_keyfile_dict(creds_dict, scope)
client = gspread.authorize(creds)
sheet = client.open("–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∞—É—Ç—Å–æ—Ä—Å").worksheet("–ö–∞–Ω–¥–∏–¥–∞—Ç–∏")

HEADERS = ["–î–∞—Ç–∞", "–ü–Ü–ë", "–î–∞—Ç–∞ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è", "–Ü–ü–ù", "–°—Ç–∞—Ç—É—Å", "–ü–µ—Ä–µ–≤—ñ—Ä—è—é—á–∏–π", "–ö–æ–º–µ–Ω—Ç–∞—Ä"]

# --- –ü–µ—Ä–µ–≤—ñ—Ä–∫–∏ ---
def is_valid_ipn(text):
    return text.isdigit() and len(text) == 10

def proper_case(text):
    return " ".join([w.capitalize() for w in text.split()])

def calculate_birthdate(ipn):
    try:
        base = date(1900, 1, 1)
        return (base + timedelta(days=int(ipn[:5]) - 1)).strftime("%d.%m.%Y")
    except:
        return ""

def normalize_ipn(ipn):
    return str(ipn).strip().zfill(10)

# --- –û–±—Ä–æ–±–Ω–∏–∫–∏ ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "*üëã –í—ñ—Ç–∞—é!*\n\n–¶–µ–π –±–æ—Ç —Å—Ç–≤–æ—Ä–µ–Ω–∏–π –∫–æ–º–∞–Ω–¥–æ—é –ê–≤—Ä–æ—Ä–∞ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫—ñ–≤ –∞—É—Ç—Å–æ—Ä—Å—É\n"
        "–Ø–∫—â–æ –≤–∏ —Ö–æ—á–µ—Ç–µ –¥–æ–¥–∞—Ç–∏ –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∞ –Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É, –Ω–∞—Ç–∏—Å–Ω—ñ—Å—Ç—å:\n"
        "========================================================\n"
        "                                           ‚ûï –î–æ–¥–∞—Ç–∏ –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∞\n"
        "========================================================\n"
        "–Ø–∫—â–æ –≤–∏ —Ö–æ—á–µ—Ç–µ –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–∏ –ø–æ–≥–æ–¥–∂–µ–Ω–∏–π/–Ω–µ –ø–æ–≥–æ–¥–∂–µ–Ω–∏–π –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å:\n"
        "========================================================\n"
        "                                           üìã –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å\n"
        "========================================================\n\n"
        "–ú–æ–∂–Ω–∞ –∑–¥—ñ–π—Å–Ω—é–≤–∞—Ç–∏ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –±—ñ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∞.\n"
        "–î–ª—è —Ü—å–æ–≥–æ –≤–Ω–µ—Å—ñ—Ç—å –Ü–ü–ù –¥–µ–∫—ñ–ª—å–∫–æ—Ö –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫—ñ–≤ —á–µ—Ä–µ–∑ –ø—Ä–æ–±—ñ–ª –∞–±–æ –≤ —Å—Ç–æ–≤–ø—á–∏–∫.\n\n"
        "*–í–∞–∂–ª–∏–≤–æ.* –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫—ñ–≤ –∑–¥—ñ–π—Å–Ω—é—î—Ç—å—Å—è *–¥–æ 24 –≥–æ–¥–∏–Ω*.\n"
        "*–°—É–±–æ—Ç–∞ —Ç–∞ –Ω–µ–¥—ñ–ª—è - –Ω–µ —Ä–æ–±–æ—á—ñ –¥–Ω—ñ*, —Ç–æ–º—É —è–∫—â–æ –≤–∏ –Ω–∞–¥—ñ—Å–ª–∞–ª–∏ –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∞ –Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É —É –ø'—è—Ç–Ω–∏—Ü—é, —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±—É–¥–µ —É —Ü–µ–π –∂–µ –¥–µ–Ω—å, –∞–±–æ —É –ø–æ–Ω–µ–¥—ñ–ª–æ–∫.\n\n"
        "–ë–∞–∂–∞—î–º–æ –≥–∞—Ä–Ω–æ–≥–æ –¥–Ω—è!",
        parse_mode="Markdown",
        reply_markup=get_main_keyboard(update.effective_user.id)
    )
    return CHOOSING

async def start_add(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚úçÔ∏è –í–≤–µ–¥—ñ—Ç—å –ü–Ü–ë –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∞:", reply_markup=cancel_keyboard)
    return ENTER_NAME

async def enter_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    if text.lower() == "—Å–∫–∞—Å—É–≤–∞—Ç–∏":
        return await cancel(update, context)

    if len(text.split()) < 2:
        await update.message.reply_text("‚ùó –§–æ—Ä–º–∞—Ç: –ü—Ä—ñ–∑–≤–∏—â–µ –Ü–º‚Äô—è –ü–æ-–±–∞—Ç—å–∫–æ–≤—ñ")
        return ENTER_NAME

    context.user_data["pib"] = proper_case(text)
    await update.message.reply_text("üî¢ –í–≤–µ–¥—ñ—Ç—å –Ü–ü–ù (10 —Ü–∏—Ñ—Ä):", reply_markup=cancel_keyboard)
    return ENTER_IPN

async def enter_ipn(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    if text.lower() == "—Å–∫–∞—Å—É–≤–∞—Ç–∏":
        return await cancel(update, context)

    if not is_valid_ipn(text):
        await update.message.reply_text("‚ùå –Ü–ü–ù –º–∞—î –º—ñ—Å—Ç–∏—Ç–∏ 10 —Ü–∏—Ñ—Ä.")
        return ENTER_IPN

    ipn = text
    context.user_data["ipn"] = ipn

    try:
        data = sheet.get_all_records(expected_headers=HEADERS)
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –∑—á–∏—Ç—É–≤–∞–Ω–Ω—è: {e}")
        await update.message.reply_text("‚ö†Ô∏è –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.", reply_markup=get_main_keyboard(update.effective_user.id))
        return CHOOSING

    for row in data:
        if normalize_ipn(row.get("–Ü–ü–ù")) == normalize_ipn(ipn):
            await update.message.reply_text("üö´ –ü—Ä–∞—Ü—ñ–≤–Ω–∏–∫ –≤–∂–µ —ñ—Å–Ω—É—î.", reply_markup=get_main_keyboard(update.effective_user.id))
            return CHOOSING

    birthdate = calculate_birthdate(ipn)
    full_name = context.user_data["pib"]
    current_date = datetime.today().strftime("%d.%m.%y")
    new_row = [current_date, full_name, birthdate, ipn, "–û—á—ñ–∫—É—î –ø–æ–≥–æ–¥–∂–µ–Ω–Ω—è", "", "", ""]

    try:
        sheet.append_row(new_row)
        await update.message.reply_text("‚úÖ –ü—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∞ –¥–æ–¥–∞–Ω–æ!", reply_markup=get_main_keyboard(update.effective_user.id))

        try:
            senders_sheet = client.open("–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∞—É—Ç—Å–æ—Ä—Å").worksheet("–í—ñ–¥–ø—Ä–∞–≤–Ω–∏–∫–∏")
            telegram_id = str(update.effective_user.id)
            senders_sheet.append_row([ipn, telegram_id])
        except Exception as e:
            logging.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–ø–∏—Å–∞—Ç–∏ Telegram ID: {e}")

    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Å—É: {e}")
        await update.message.reply_text("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –¥–æ–¥–∞—Ç–∏.", reply_markup=get_main_keyboard(update.effective_user.id))

    return CHOOSING

async def start_check(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üîé –í–≤–µ–¥—ñ—Ç—å –æ–¥–∏–Ω –∞–±–æ –∫—ñ–ª—å–∫–∞ –Ü–ü–ù (—á–µ—Ä–µ–∑ –ø—Ä–æ–±—ñ–ª):", reply_markup=cancel_keyboard)
    return CHECK_STATUS

async def check_ipn(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    if text.lower() == "—Å–∫–∞—Å—É–≤–∞—Ç–∏":
        return await cancel(update, context)

    ipns = text.split()
    if not all(ipn.isdigit() and len(ipn) == 10 for ipn in ipns):
        await update.message.reply_text("‚ùå –£—Å—ñ –Ü–ü–ù –º–∞—é—Ç—å –º—ñ—Å—Ç–∏—Ç–∏ 10 —Ü–∏—Ñ—Ä.")
        return CHECK_STATUS

    try:
        data = sheet.get_all_records()
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑—á–∏—Ç—É–≤–∞–Ω–Ω—ñ: {e}")
        await update.message.reply_text("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑—á–∏—Ç–∞—Ç–∏ –¥–∞–Ω—ñ.")
        return CHOOSING

    response = []
    for ipn in ipns:
        found = False
        for row in data:
            if str(row.get("–Ü–ü–ù", "")).zfill(10) == ipn:
                response.append(f"{ipn} ‚Äì {row.get('–ü–Ü–ë')} ‚Äì {row.get('–°—Ç–∞—Ç—É—Å')}")
                found = True
                break
        if not found:
            response.append(f"{ipn} ‚Äì ‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ")

    await update.message.reply_text("\n".join(response), reply_markup=get_main_keyboard(update.effective_user.id))
    return CHOOSING

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üîô –°–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=get_main_keyboard(update.effective_user.id))
    return CHOOSING

# --- –ó–∞–ø—É—Å–∫ ---
if __name__ == "__main__":
    from analytics_menu import analytics_handlers

    app = ApplicationBuilder().token(os.getenv("Telegram_Token")).build()

    conv = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            CHOOSING: [
                MessageHandler(filters.Regex("^‚ûï –î–æ–¥–∞—Ç–∏ –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∞$"), start_add),
                MessageHandler(filters.Regex("^üìã –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å$"), start_check),
                MessageHandler(filters.Regex("^‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏$"), cancel),
            ],
            ENTER_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, enter_name)],
            ENTER_IPN: [MessageHandler(filters.TEXT & ~filters.COMMAND, enter_ipn)],
            CHECK_STATUS: [
                MessageHandler(filters.Regex("^‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏|–°–∫–∞—Å—É–≤–∞—Ç–∏$"), cancel),
                MessageHandler(filters.TEXT & ~filters.COMMAND, check_ipn)
            ],
        },
        fallbacks=[MessageHandler(filters.Regex("^‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏$"), cancel)],
        allow_reentry=True
    )

    app.add_handler(conv)

    # –î–æ–¥–∞—î–º–æ –∞–Ω–∞–ª—ñ—Ç–∏—á–Ω—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏
    for handler in analytics_handlers:
        app.add_handler(handler)

    app.run_polling()
