import os
import json
import logging
from datetime import date, timedelta
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    ContextTypes, ConversationHandler, filters
)
import gspread
from oauth2client.service_account import ServiceAccountCredentials

# Logging
logging.basicConfig(level=logging.INFO)

CHOOSING, ENTER_NAME, ENTER_IPN, CHECK_STATUS = range(4)

main_keyboard = ReplyKeyboardMarkup([
    ["‚ûï –î–æ–¥–∞—Ç–∏ –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∞"],
    ["üìã –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å"]
], resize_keyboard=True)

cancel_keyboard = ReplyKeyboardMarkup([
    ["‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏"]
], resize_keyboard=True)

# GSpread auth
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds_dict = json.loads(os.getenv("Google_Creds_Json"))
creds = ServiceAccountCredentials.from_json_keyfile_dict(creds_dict, scope)
client = gspread.authorize(creds)
sheet = client.open("–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∞—É—Ç—Å–æ—Ä—Å").worksheet("–ö–∞–Ω–¥–∏–¥–∞—Ç–∏")

def is_valid_ipn(text):
    return text.isdigit() and len(text) == 10

def proper_case(text):
    return " ".join([w.capitalize() for w in text.split()])

def calculate_birthdate(ipn):
    try:
        base = date(1900, 1, 1)
        return (base + timedelta(days=int(ipn[:5]) - 1)).strftime("%d.%m.%Y")
    except:
        return ""

# --- Handlers ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã –í—ñ—Ç–∞—é!\n\n‚ûï –î–æ–¥–∞—Ç–∏ –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∞\nüìã –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å",
        reply_markup=main_keyboard
    )
    return CHOOSING

async def start_add(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚úçÔ∏è –í–≤–µ–¥—ñ—Ç—å –ü–Ü–ë –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∞:", reply_markup=cancel_keyboard)
    return ENTER_NAME

async def enter_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    parts = proper_case(update.message.text.strip()).split()
    if len(parts) != 3:
        await update.message.reply_text("‚ùó –§–æ—Ä–º–∞—Ç: –ü—Ä—ñ–∑–≤–∏—â–µ –Ü–º º—è –ü–æ –±–∞—Ç—å–∫–æ–≤—ñ")
        return ENTER_NAME
    context.user_data["name_parts"] = parts
    await update.message.reply_text("üî¢ –í–≤–µ–¥—ñ—Ç—å –Ü–ü–ù (10 —Ü–∏—Ñ—Ä):")
    return ENTER_IPN

async def enter_ipn(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    if text.lower() == "—Å–∫–∞—Å—É–≤–∞—Ç–∏":
        return await cancel(update, context)

    if not is_valid_ipn(text):
        await update.message.reply_text("‚ùå –Ü–ü–ù –º–∞—î –º—ñ—Å—Ç–∏—Ç–∏ —Ä—ñ–≤–Ω–æ 10 —Ü–∏—Ñ—Ä. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")
        return ENTER_IPN

    ipn = text
    context.user_data["ipn"] = ipn

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥—É–±–ª—ñ–∫–∞—Ç–∞
    try:
        data = sheet.get_all_records(expected_headers=[
            "–î–∞—Ç–∞", "–ü—Ä—ñ–∑–≤–∏—â–µ", "–Ü–º—è", "–ü–æ –±–∞—Ç—å–∫–æ–≤—ñ",
            "–î–∞—Ç–∞ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è", "–Ü–ü–ù", "–°—Ç–∞—Ç—É—Å", "–ü–µ—Ä–µ–≤—ñ—Ä—è—é—á–∏–π", "–ö–æ–º–µ–Ω—Ç–∞—Ä"
        ])
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –∑—á–∏—Ç—É–≤–∞–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ: {e}")
        await update.message.reply_text("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Ç–∞–±–ª–∏—Ü—é. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.", reply_markup=main_keyboard)
        return CHOOSING

    for row in data:
        if str(row.get("–Ü–ü–ù")) == ipn:
            await update.message.reply_text("üö´ –ü—Ä–∞—Ü—ñ–≤–Ω–∏–∫ –∑ —Ç–∞–∫–∏–º –Ü–ü–ù –≤–∂–µ —ñ—Å–Ω—É—î. –°–ø—Ä–æ–±—É–π—Ç–µ —ñ–Ω—à–∏–π –∞–±–æ –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Å—Ç–∞—Ç—É—Å.", reply_markup=main_keyboard)
            return CHOOSING

    # –û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—à–∏—Ö –¥–∞–Ω–∏—Ö
    surname, name, patronymic = context.user_data["name_parts"]
    birthdate = calculate_birthdate(ipn)

    new_row = ["", surname, name, patronymic, birthdate, ipn, "–û—á—ñ–∫—É—î –ø–æ–≥–æ–¥–∂–µ–Ω–Ω—è", "", "",""]

    try:
        logging.info(f"üìù –î–æ–¥–∞—î–º–æ —Ä—è–¥–æ–∫: {new_row}")
        sheet.append_row(new_row)
        logging.info("‚úÖ –†—è–¥–æ–∫ —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ –¥–æ Google –¢–∞–±–ª–∏—Ü—ñ.")
        await update.message.reply_text("‚úÖ –ü—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∞ –¥–æ–¥–∞–Ω–æ!", reply_markup=main_keyboard)
    except Exception as e:
        logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –¥–æ —Ç–∞–±–ª–∏—Ü—ñ: {e}")
        await update.message.reply_text("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –¥–æ–¥–∞—Ç–∏ –¥–æ —Ç–∞–±–ª–∏—Ü—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.", reply_markup=main_keyboard)

    return CHOOSING

async def start_check(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üîé –í–≤–µ–¥—ñ—Ç—å –Ü–ü–ù –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∞:", reply_markup=cancel_keyboard)
    return CHECK_STATUS

async def check_ipn(update: Update, context: ContextTypes.DEFAULT_TYPE):
    ipn = update.message.text.strip()
    if not is_valid_ipn(ipn):
        await update.message.reply_text("‚ùó –Ü–ü–ù –º–∞—î –º—ñ—Å—Ç–∏—Ç–∏ 10 —Ü–∏—Ñ—Ä.")
        return CHECK_STATUS

    data = sheet.get_all_records(expected_headers=[
        "–î–∞—Ç–∞", "–ü—Ä—ñ–∑–≤–∏—â–µ", "–Ü–º—è", "–ü–æ –±–∞—Ç—å–∫–æ–≤—ñ",
        "–î–∞—Ç–∞ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è", "–Ü–ü–ù", "–°—Ç–∞—Ç—É—Å", "–ü–µ—Ä–µ–≤—ñ—Ä—è—é—á–∏–π", "–ö–æ–º–µ–Ω—Ç–∞—Ä"
    ])

    for row in data:
        if str(row["–Ü–ü–ù"]) == ipn:
            await update.message.reply_text(f'{row["–Ü–º—è"]} {row["–ü–æ –±–∞—Ç—å–∫–æ–≤—ñ"]} ‚Äî {row["–°—Ç–∞—Ç—É—Å"]}', reply_markup=main_keyboard)
            return CHOOSING

    await update.message.reply_text("üö´ –ü—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", reply_markup=main_keyboard)
    return CHOOSING

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üîô –°–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=main_keyboard)
    return CHOOSING

# --- Start app ---
if __name__ == "__main__":
    app = ApplicationBuilder().token(os.getenv("Telegram_Token")).build()
    conv = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            CHOOSING: [
                MessageHandler(filters.Regex("^(‚ûï –î–æ–¥–∞—Ç–∏ –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∞)$"), start_add),
                MessageHandler(filters.Regex("^(üìã –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å)$"), start_check),
                MessageHandler(filters.Regex("^(‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏|–°–∫–∞—Å—É–≤–∞—Ç–∏)$"), cancel)
            ],
            ENTER_NAME: [
                MessageHandler(filters.Regex("^(‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏|–°–∫–∞—Å—É–≤–∞—Ç–∏)$"), cancel),
                MessageHandler(filters.TEXT & ~filters.COMMAND, enter_name)
            ],
            ENTER_IPN: [
                MessageHandler(filters.Regex("^(‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏|–°–∫–∞—Å—É–≤–∞—Ç–∏)$"), cancel),
                MessageHandler(filters.TEXT & ~filters.COMMAND, enter_ipn)
            ],
            CHECK_STATUS: [
                MessageHandler(filters.Regex("^(‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏|–°–∫–∞—Å—É–≤–∞—Ç–∏)$"), cancel),
                MessageHandler(filters.TEXT & ~filters.COMMAND, check_ipn)
            ],
        },
        fallbacks=[
            MessageHandler(filters.Regex("^(‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏|–°–∫–∞—Å—É–≤–∞—Ç–∏)$"), cancel)
        ],
        allow_reentry=True
    )
    
    app.add_handler(conv)
    app.run_polling()
