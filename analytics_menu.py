from telegram import ReplyKeyboardMarkup
from telegram.ext import ConversationHandler, MessageHandler, filters
from bot import CHOOSING, get_main_keyboard, sheet
from datetime import datetime

# --- –°—Ç–∞–Ω–∏ –¥–ª—è –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏ ---
ANALYTICS_MENU, ANALYTICS_DATE_INPUT, STATISTICS_MENU, STATISTICS_PERIOD_START, STATISTICS_PERIOD_END, STATISTICS_STANDARD = range(100, 106)

analytics_keyboard = ReplyKeyboardMarkup([
    ["üîç –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –∑–∞ –¥–∞—Ç–æ—é"],
    ["üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"],
    ["‚¨ÖÔ∏è –ù–∞–∑–∞–¥"]
], resize_keyboard=True)

statistics_keyboard = ReplyKeyboardMarkup([
    ["üìÖ –ó–∞ –ø–µ—Ä—ñ–æ–¥", "üìÜ –°—Ç–∞–Ω–¥–∞—Ä—Ç"],
    ["‚¨ÖÔ∏è –ù–∞–∑–∞–¥"]
], resize_keyboard=True)

# === –û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–∫–∏ "üìä –ê–Ω–∞–ª—ñ—Ç–∏–∫–∞" ===
async def show_analytics_menu(update, context):
    await update.message.reply_text("üìä *–ú–µ–Ω—é –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏*", reply_markup=analytics_keyboard, parse_mode="Markdown")
    return ANALYTICS_MENU

# === –û–±—Ä–æ–±–Ω–∏–∫ "üîç –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –∑–∞ –¥–∞—Ç–æ—é" ===
async def ask_analytics_date(update, context):
    await update.message.reply_text("üìÖ –í–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É —É —Ñ–æ—Ä–º–∞—Ç—ñ –¥–¥.–º–º.—Ä—Ä (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥ 05.07.24):")
    return ANALYTICS_DATE_INPUT

async def show_employees_by_date(update, context):
    date_str = update.message.text.strip()
    try:
        # –ü—Ä–æ–±—É—î–º–æ –ø–∞—Ä—Å–∏—Ç–∏ –¥–∞—Ç—É
        dt = datetime.strptime(date_str, "%d.%m.%y")
        formatted_date = dt.strftime("%d.%m.%y")
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ —É —Ñ–æ—Ä–º–∞—Ç—ñ –¥–¥.–º–º.—Ä—Ä (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥ 05.07.24):")
        return ANALYTICS_DATE_INPUT

    try:
        records = sheet.get_all_records()
        results = []
        for row in records:
            if row.get("–î–∞—Ç–∞") == formatted_date:
                results.append(f"üë§ {row.get('–ü–Ü–ë')} ‚Äì *{row.get('–°—Ç–∞—Ç—É—Å')}*")

        if results:
            await update.message.reply_text("\n".join(results), parse_mode="Markdown")
        else:
            await update.message.reply_text("‚ÑπÔ∏è –ü—Ä–∞—Ü—ñ–≤–Ω–∏–∫—ñ–≤ –∑–∞ —Ü—é –¥–∞—Ç—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")

    except Exception as e:
        await update.message.reply_text("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑—á–∏—Ç—É–≤–∞–Ω–Ω—ñ —Ç–∞–±–ª–∏—Ü—ñ.")

    keyboard = get_main_keyboard(update.effective_user.id)
    await update.message.reply_text("‚¨ÖÔ∏è –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é", reply_markup=keyboard)
    return CHOOSING

# === –û–±—Ä–æ–±–Ω–∏–∫ "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞" ===
async def ask_statistics_type(update, context):
    await update.message.reply_text("üìä –û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:", reply_markup=statistics_keyboard)
    return STATISTICS_MENU

# === –û–±—Ä–æ–±–Ω–∏–∫ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –Ω–∞–∑–∞–¥ –∑ –º–µ–Ω—é –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏ ===
async def analytics_back(update, context):
    keyboard = get_main_keyboard(update.effective_user.id)
    await update.message.reply_text("üîô –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –Ω–∞–∑–∞–¥...", reply_markup=keyboard)
    return CHOOSING

# === –û–±–≥–æ—Ä—Ç–∫–∞ –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è handlers ===
analytics_conv = ConversationHandler(
    entry_points=[
        MessageHandler(filters.Regex("^üìä –ê–Ω–∞–ª—ñ—Ç–∏–∫–∞$"), show_analytics_menu)
    ],
    states={
        ANALYTICS_MENU: [
            MessageHandler(filters.Regex("^üîç –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –∑–∞ –¥–∞—Ç–æ—é$"), ask_analytics_date),
            MessageHandler(filters.Regex("^üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞$"), ask_statistics_type),
            MessageHandler(filters.Regex("^‚¨ÖÔ∏è –ù–∞–∑–∞–¥$"), analytics_back),
        ],
        ANALYTICS_DATE_INPUT: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, show_employees_by_date)
        ],
    },
    fallbacks=[MessageHandler(filters.Regex("^‚¨ÖÔ∏è –ù–∞–∑–∞–¥$"), analytics_back)],
    allow_reentry=True
)

analytics_handlers = [analytics_conv]
