from telegram import ReplyKeyboardMarkup
from telegram.ext import ConversationHandler, MessageHandler, filters
from bot import CHOOSING, get_main_keyboard, sheet
from datetime import datetime, timedelta

# --- –°—Ç–∞–Ω–∏ –¥–ª—è –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏ ---
ANALYTICS_MENU, ANALYTICS_DATE_INPUT, STATISTICS_MENU, STATISTICS_PERIOD_START, STATISTICS_PERIOD_END, STATISTICS_STANDARD = range(100, 106)

analytics_keyboard = ReplyKeyboardMarkup([
    ["üîç –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –∑–∞ –¥–∞—Ç–æ—é"],
    ["üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"],
    ["‚¨ÖÔ∏è –ù–∞–∑–∞–¥"]
], resize_keyboard=True)

statistics_keyboard = ReplyKeyboardMarkup([
    ["üìÖ –ó–∞ –ø–µ—Ä—ñ–æ–¥", "üìÜ –°—å–æ–≥–æ–¥–Ω—ñ/–≤—á–æ—Ä–∞"],
    ["üìà –ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"],
    ["‚¨ÖÔ∏è –ù–∞–∑–∞–¥"]
], resize_keyboard=True)

def parse_date_input(text):
    text = text.strip().replace("/", ".")
    try:
        return datetime.strptime(text, "%d.%m.%y")
    except ValueError:
        return None

# === –û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–∫–∏ "üìä –ê–Ω–∞–ª—ñ—Ç–∏–∫–∞" ===
async def show_analytics_menu(update, context):
    await update.message.reply_text("üìä *–ú–µ–Ω—é –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏*", reply_markup=analytics_keyboard, parse_mode="Markdown")
    return ANALYTICS_MENU

# === –û–±—Ä–æ–±–Ω–∏–∫ "üîç –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –∑–∞ –¥–∞—Ç–æ—é" ===
async def ask_analytics_date(update, context):
    await update.message.reply_text("üìÖ –í–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É —É —Ñ–æ—Ä–º–∞—Ç—ñ –¥–¥.–º–º.—Ä—Ä (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥ 05.07.24):")
    return ANALYTICS_DATE_INPUT

async def show_employees_by_date(update, context):
    date_str = update.message.text.strip()
    try:
        dt = datetime.strptime(date_str, "%d.%m.%y")
        formatted_date = dt.strftime("%d.%m.%y")
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ —É —Ñ–æ—Ä–º–∞—Ç—ñ –¥–¥.–º–º.—Ä—Ä (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥ 05.07.24):")
        return ANALYTICS_DATE_INPUT

    try:
        records = sheet.get_all_records()
        results = []
        for row in records:
            if row.get("–î–∞—Ç–∞") == formatted_date:
                results.append(f"üë§ {row.get('–ü–Ü–ë')} ‚Äì *{row.get('–°—Ç–∞—Ç—É—Å')}*")

        if results:
            await update.message.reply_text("\n".join(results), parse_mode="Markdown")
        else:
            await update.message.reply_text("‚ÑπÔ∏è –ü—Ä–∞—Ü—ñ–≤–Ω–∏–∫—ñ–≤ –∑–∞ —Ü—é –¥–∞—Ç—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")

    except Exception as e:
        await update.message.reply_text("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑—á–∏—Ç—É–≤–∞–Ω–Ω—ñ —Ç–∞–±–ª–∏—Ü—ñ.")

    keyboard = get_main_keyboard(update.effective_user.id)
    await update.message.reply_text("‚¨ÖÔ∏è –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é", reply_markup=keyboard)
    return CHOOSING

# === –û–±—Ä–æ–±–Ω–∏–∫ "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞" ===
async def ask_statistics_type(update, context):
    await update.message.reply_text("üìä –û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:", reply_markup=statistics_keyboard)
    return STATISTICS_MENU

async def ask_period_start(update, context):
    await update.message.reply_text("üóì –í–≤–µ–¥—ñ—Ç—å –ø–æ—á–∞—Ç–∫–æ–≤—É –¥–∞—Ç—É —É —Ñ–æ—Ä–º–∞—Ç—ñ –¥–¥.–º–º.—Ä—Ä:")
    return STATISTICS_PERIOD_START

async def ask_period_end(update, context):
    try:
        start_date = datetime.strptime(update.message.text.strip(), "%d.%m.%y")
        context.user_data["stat_start"] = start_date
    except:
        await update.message.reply_text("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")
        return STATISTICS_PERIOD_START

    await update.message.reply_text("üìÜ –¢–µ–ø–µ—Ä –≤–≤–µ–¥—ñ—Ç—å –∫—ñ–Ω—Ü–µ–≤—É –¥–∞—Ç—É —É —Ñ–æ—Ä–º–∞—Ç—ñ –¥–¥.–º–º.—Ä—Ä:")
    return STATISTICS_PERIOD_END

async def show_statistics_period(update, context):
    try:
        end_date = datetime.strptime(update.message.text.strip(), "%d.%m.%y")
        start_date = context.user_data.get("stat_start")
        if not start_date:
            raise ValueError("–ù–µ–º–∞—î –ø–æ—á–∞—Ç–∫–æ–≤–æ—ó –¥–∞—Ç–∏")

        records = sheet.get_all_records()
        submitted = checked = positive = negative = 0

        for row in records:
            row_date_str = row.get("–î–∞—Ç–∞")
            try:
                row_date = datetime.strptime(row_date_str, "%d.%m.%y")
            except:
                continue

            if start_date <= row_date <= end_date:
                submitted += 1
                status = row.get("–°—Ç–∞—Ç—É—Å", "").lower()
                if status != "–æ—á—ñ–∫—É—î –ø–æ–≥–æ–¥–∂–µ–Ω–Ω—è":
                    checked += 1
                    if "‚úÖ –ø–æ–≥–æ–¥–∂–µ–Ω–æ" in status:
                        positive += 1
                    elif "‚ùå –Ω–µ –ø–æ–≥–æ–¥–∂–µ–Ω–æ" in status:
                        negative += 1

        text = (
            f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑ {start_date.strftime('%d.%m.%y')} –ø–æ {end_date.strftime('%d.%m.%y')}*\n\n"
            f"üîπ –ü–æ–¥–∞–Ω–æ: *{submitted}*\n"
            f"üî∏ –ü–µ—Ä–µ–≤—ñ—Ä–µ–Ω–æ: *{checked}*\n"
            f"‚úÖ –ü–æ–∑–∏—Ç–∏–≤–Ω–∏—Ö: *{positive}*\n"
            f"‚ùå –ù–µ–≥–∞—Ç–∏–≤–Ω–∏—Ö: *{negative}*"
        )

        await update.message.reply_text(text, parse_mode="Markdown")
    except:
        await update.message.reply_text("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏. –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—å, —â–æ –¥–∞—Ç–∏ —É —Ñ–æ—Ä–º–∞—Ç—ñ –¥–¥.–º–º.—Ä—Ä.")
        return STATISTICS_MENU

    return await analytics_back(update, context)

async def show_standard_statistics(update, context):
    today = datetime.today()
    weekday = today.weekday()

    if weekday == 0:
        yesterday = today - timedelta(days=3)
    elif weekday == 6:
        yesterday = today - timedelta(days=2)
    else:
        yesterday = today - timedelta(days=1)

    def get_stats_for_check_date(date_obj):
        formatted = date_obj.strftime("%d.%m.%y")
        total = checked = approved = rejected = 0
        try:
            records = sheet.get_all_records()
            for row in records:
                check_date = row.get("–î–∞—Ç–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏", "").strip()
                if check_date == formatted:
                    checked += 1
                    status = row.get("–°—Ç–∞—Ç—É—Å", "").strip()
                    if status == "‚úÖ –ü–æ–≥–æ–¥–∂–µ–Ω–æ":
                        approved += 1
                    elif status == "‚ùå –ù–µ –ø–æ–≥–æ–¥–∂–µ–Ω–æ":
                        rejected += 1
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è: {e}")
        return total, formatted, checked, approved, rejected

    def get_submitted_for_date(date_obj):
        formatted = date_obj.strftime("%d.%m.%y")
        try:
            return sum(1 for row in sheet.get_all_records() if row.get("–î–∞—Ç–∞", "").strip() == formatted)
        except:
            return 0

    def count_pending():
        try:
            return sum(1 for row in sheet.get_all_records() if row.get("–°—Ç–∞—Ç—É—Å", "").strip() == "–û—á—ñ–∫—É—î –ø–æ–≥–æ–¥–∂–µ–Ω–Ω—è")
        except:
            return 0

    t_total, t_formatted, t_checked, t_approved, t_rejected = get_stats_for_check_date(today)
    y_total, y_formatted, y_checked, y_approved, y_rejected = get_stats_for_check_date(yesterday)

    t_submitted = get_submitted_for_date(today)
    y_submitted = get_submitted_for_date(yesterday)
    pending_total = count_pending()

    text = (
        f"üìÜ *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å—å–æ–≥–æ–¥–Ω—ñ* ({t_formatted}):\n"
        f"‚Ä¢ –ü–æ–¥–∞–Ω–æ: {t_submitted}\n"
        f"‚Ä¢ –ü–µ—Ä–µ–≤—ñ—Ä–µ–Ω–æ: {t_checked}\n"
        f"‚Ä¢ ‚úÖ –ü–æ–≥–æ–¥–∂–µ–Ω–æ: {t_approved}\n"
        f"‚Ä¢ ‚ùå –ù–µ –ø–æ–≥–æ–¥–∂–µ–Ω–æ: {t_rejected}\n\n"
        f"üìÖ *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –≤—á–æ—Ä–∞* ({y_formatted}):\n"
        f"‚Ä¢ –ü–æ–¥–∞–Ω–æ: {y_submitted}\n"
        f"‚Ä¢ –ü–µ—Ä–µ–≤—ñ—Ä–µ–Ω–æ: {y_checked}\n"
        f"‚Ä¢ ‚úÖ –ü–æ–≥–æ–¥–∂–µ–Ω–æ: {y_approved}\n"
        f"‚Ä¢ ‚ùå –ù–µ –ø–æ–≥–æ–¥–∂–µ–Ω–æ: {y_rejected}\n\n"
        f"‚è≥ *–û—á—ñ–∫—É—î –ø–æ–≥–æ–¥–∂–µ–Ω–Ω—è –∑–∞—Ä–∞–∑:* {pending_total}"
    )

    await update.message.reply_text(text, parse_mode="Markdown")
    return STATISTICS_MENU

async def show_overall_statistics(update,context):
    try:
        records = sheet.get_all_records()
        submitted = checked = approved = rejected = 0

        for row in records:
            submitted += 1
            status = row.get("–°—Ç–∞—Ç—É—Å","").strip().lower()
            if row.get("–î–∞—Ç–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏","").strip():
                checked += 1
                if status == "‚úÖ –ü–æ–≥–æ–¥–∂–µ–Ω–æ":
                    approved += 1
                elif status == "‚ùå –ù–µ –ø–æ–≥–æ–¥–∂–µ–Ω–æ":
                    rejected += 1

        text = (
            f"üìà *–ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –≤–µ—Å—å –ø–µ—Ä—ñ–æ–¥*\n\n"
            f"üîπ –ü–æ–¥–∞–Ω–æ: *{submitted}*\n"
            f"üî∏ –ü–µ—Ä–µ–≤—ñ—Ä–µ–Ω–æ: *{checked}*\n"
            f"‚úÖ –ü–æ–≥–æ–¥–∂–µ–Ω–æ: *{approved}*\n"
            f"‚ùå –ù–µ –ø–æ–≥–æ–¥–∂–µ–Ω–æ: *{rejected}*"
        )
        await update.message.reply_text(text,parse_mode = "Markdown")
    except Exception as e:
        await update.message.reply_text("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑—á–∏—Ç—É–≤–∞–Ω–Ω—ñ —Ç–∞–±–ª–∏—Ü—ñ.")
    return STATISTICS_MENU

# === –û–±—Ä–æ–±–Ω–∏–∫ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –Ω–∞–∑–∞–¥ –∑ –º–µ–Ω—é –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏ ===
async def analytics_back(update, context):
    keyboard = get_main_keyboard(update.effective_user.id)
    await update.message.reply_text("üîô –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –Ω–∞–∑–∞–¥...", reply_markup=keyboard)
    return CHOOSING

# === –û–±–≥–æ—Ä—Ç–∫–∞ –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è handlers ===
analytics_conv = ConversationHandler(
    entry_points=[
        MessageHandler(filters.Regex("^üìä –ê–Ω–∞–ª—ñ—Ç–∏–∫–∞$"), show_analytics_menu)
    ],
    states={
        ANALYTICS_MENU: [
            MessageHandler(filters.Regex("^üîç –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –∑–∞ –¥–∞—Ç–æ—é$"), ask_analytics_date),
            MessageHandler(filters.Regex("^üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞$"), ask_statistics_type),
            MessageHandler(filters.Regex("^‚¨ÖÔ∏è –ù–∞–∑–∞–¥$"), analytics_back),
        ],
        ANALYTICS_DATE_INPUT: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, show_employees_by_date)
        ],
        STATISTICS_MENU: [
            MessageHandler(filters.Regex("^üìÖ –ó–∞ –ø–µ—Ä—ñ–æ–¥$"), ask_period_start),
            MessageHandler(filters.Regex("^üìÜ –°—Ç–∞–Ω–¥–∞—Ä—Ç$"), show_standard_statistics),
            MessageHandler(filters.Regex("^üìà –ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞$"),show_overall_statistics),
            MessageHandler(filters.Regex("^‚¨ÖÔ∏è –ù–∞–∑–∞–¥$"), analytics_back),
        ],
        STATISTICS_PERIOD_START: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, ask_period_end),
        ],
        STATISTICS_PERIOD_END: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, show_statistics_period)
        ]
    },
    fallbacks=[MessageHandler(filters.Regex("^‚¨ÖÔ∏è –ù–∞–∑–∞–¥$"), analytics_back)],
    allow_reentry=True
)

analytics_handlers = [analytics_conv]
